//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.18444 版自动生成。
// 
#pragma warning disable 1591

namespace ZD.MAP.ZDMAP_Analy {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AnalySoap", Namespace="http://www.mapgis.com.cn/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class Analy : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ExecuteAnalyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteAnalyNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteMapAnalyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAnalyStatResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAnalyStatResultNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAnalysOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteXMLStatResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnalyStatResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnalyStatResultNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAnalyParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewSetAnalyParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAnalyParamNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCoveredRegionCodeByGUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCoveredRegionCodeByGUIDNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPolygonCoveredOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPolygonCoveredNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCoveredRegionCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCoveredRegionCodeNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnalyResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnalyResultNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GDLStataOperationCompleted;
        
        private System.Threading.SendOrPostCallback PZGStataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatMDBPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatMDBPathNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnalyResXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnalyResXMLNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutTableScaleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutTableScaleArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnalyTableInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnalyTableInfoNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteAnalyForWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteAnalyNewForWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteMapAnalyForWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnalyResultInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsTableExistInDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback PolygonsRelationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Analy() {
            this.Url = global::ZD.MAP.Properties.Settings.Default.ZD_MAP_ZDMAP_Analy_Analy;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ExecuteAnalyCompletedEventHandler ExecuteAnalyCompleted;
        
        /// <remarks/>
        public event ExecuteAnalyNewCompletedEventHandler ExecuteAnalyNewCompleted;
        
        /// <remarks/>
        public event ExecuteMapAnalyCompletedEventHandler ExecuteMapAnalyCompleted;
        
        /// <remarks/>
        public event DeleteAnalyStatResultCompletedEventHandler DeleteAnalyStatResultCompleted;
        
        /// <remarks/>
        public event DeleteAnalyStatResultNewCompletedEventHandler DeleteAnalyStatResultNewCompleted;
        
        /// <remarks/>
        public event DeleteAnalysCompletedEventHandler DeleteAnalysCompleted;
        
        /// <remarks/>
        public event DeleteXMLStatResultCompletedEventHandler DeleteXMLStatResultCompleted;
        
        /// <remarks/>
        public event GetAnalyStatResultCompletedEventHandler GetAnalyStatResultCompleted;
        
        /// <remarks/>
        public event GetAnalyStatResultNewCompletedEventHandler GetAnalyStatResultNewCompleted;
        
        /// <remarks/>
        public event SetAnalyParamCompletedEventHandler SetAnalyParamCompleted;
        
        /// <remarks/>
        public event NewSetAnalyParamCompletedEventHandler NewSetAnalyParamCompleted;
        
        /// <remarks/>
        public event SetAnalyParamNewCompletedEventHandler SetAnalyParamNewCompleted;
        
        /// <remarks/>
        public event GetCoveredRegionCodeByGUIDCompletedEventHandler GetCoveredRegionCodeByGUIDCompleted;
        
        /// <remarks/>
        public event GetCoveredRegionCodeByGUIDNewCompletedEventHandler GetCoveredRegionCodeByGUIDNewCompleted;
        
        /// <remarks/>
        public event IsPolygonCoveredCompletedEventHandler IsPolygonCoveredCompleted;
        
        /// <remarks/>
        public event IsPolygonCoveredNewCompletedEventHandler IsPolygonCoveredNewCompleted;
        
        /// <remarks/>
        public event GetCoveredRegionCodeCompletedEventHandler GetCoveredRegionCodeCompleted;
        
        /// <remarks/>
        public event GetCoveredRegionCodeNewCompletedEventHandler GetCoveredRegionCodeNewCompleted;
        
        /// <remarks/>
        public event GetAnalyResultCompletedEventHandler GetAnalyResultCompleted;
        
        /// <remarks/>
        public event GetAnalyResultNewCompletedEventHandler GetAnalyResultNewCompleted;
        
        /// <remarks/>
        public event GDLStataCompletedEventHandler GDLStataCompleted;
        
        /// <remarks/>
        public event PZGStataCompletedEventHandler PZGStataCompleted;
        
        /// <remarks/>
        public event GetStatMDBPathCompletedEventHandler GetStatMDBPathCompleted;
        
        /// <remarks/>
        public event GetStatMDBPathNewCompletedEventHandler GetStatMDBPathNewCompleted;
        
        /// <remarks/>
        public event GetAnalyResXMLCompletedEventHandler GetAnalyResXMLCompleted;
        
        /// <remarks/>
        public event GetAnalyResXMLNewCompletedEventHandler GetAnalyResXMLNewCompleted;
        
        /// <remarks/>
        public event GetOutTableScaleCompletedEventHandler GetOutTableScaleCompleted;
        
        /// <remarks/>
        public event GetOutTableScaleArrayCompletedEventHandler GetOutTableScaleArrayCompleted;
        
        /// <remarks/>
        public event GetAnalyTableInfoCompletedEventHandler GetAnalyTableInfoCompleted;
        
        /// <remarks/>
        public event GetAnalyTableInfoNewCompletedEventHandler GetAnalyTableInfoNewCompleted;
        
        /// <remarks/>
        public event ExecuteAnalyForWebCompletedEventHandler ExecuteAnalyForWebCompleted;
        
        /// <remarks/>
        public event ExecuteAnalyNewForWebCompletedEventHandler ExecuteAnalyNewForWebCompleted;
        
        /// <remarks/>
        public event ExecuteMapAnalyForWebCompletedEventHandler ExecuteMapAnalyForWebCompleted;
        
        /// <remarks/>
        public event GetAnalyResultInfoCompletedEventHandler GetAnalyResultInfoCompleted;
        
        /// <remarks/>
        public event IsTableExistInDBCompletedEventHandler IsTableExistInDBCompleted;
        
        /// <remarks/>
        public event PolygonsRelationCompletedEventHandler PolygonsRelationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/ExecuteAnaly", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteAnaly(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotDataYear, 
                    string strDotScale, 
                    string strDotType, 
                    string strDotString, 
                    string strCoveredSubjectList, 
                    string strCoverDataYearList, 
                    string strCoverScaleList, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ) {
            object[] results = this.Invoke("ExecuteAnaly", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotDataYear,
                        strDotScale,
                        strDotType,
                        strDotString,
                        strCoveredSubjectList,
                        strCoverDataYearList,
                        strCoverScaleList,
                        strUser,
                        nAlyType,
                        ifReturnRes,
                        strList,
                        dLeftDistance,
                        dRightDistance,
                        nKnobType,
                        str6xFileName,
                        strUnit,
                        strPointPM,
                        strPointMU,
                        strPointGQ});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteAnalyAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotDataYear, 
                    string strDotScale, 
                    string strDotType, 
                    string strDotString, 
                    string strCoveredSubjectList, 
                    string strCoverDataYearList, 
                    string strCoverScaleList, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ) {
            this.ExecuteAnalyAsync(strCaseNo, strAreaNo, strDotRegionCode, strDotSubjectType, strDotDataYear, strDotScale, strDotType, strDotString, strCoveredSubjectList, strCoverDataYearList, strCoverScaleList, strUser, nAlyType, ifReturnRes, strList, dLeftDistance, dRightDistance, nKnobType, str6xFileName, strUnit, strPointPM, strPointMU, strPointGQ, null);
        }
        
        /// <remarks/>
        public void ExecuteAnalyAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotDataYear, 
                    string strDotScale, 
                    string strDotType, 
                    string strDotString, 
                    string strCoveredSubjectList, 
                    string strCoverDataYearList, 
                    string strCoverScaleList, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ, 
                    object userState) {
            if ((this.ExecuteAnalyOperationCompleted == null)) {
                this.ExecuteAnalyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteAnalyOperationCompleted);
            }
            this.InvokeAsync("ExecuteAnaly", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotDataYear,
                        strDotScale,
                        strDotType,
                        strDotString,
                        strCoveredSubjectList,
                        strCoverDataYearList,
                        strCoverScaleList,
                        strUser,
                        nAlyType,
                        ifReturnRes,
                        strList,
                        dLeftDistance,
                        dRightDistance,
                        nKnobType,
                        str6xFileName,
                        strUnit,
                        strPointPM,
                        strPointMU,
                        strPointGQ}, this.ExecuteAnalyOperationCompleted, userState);
        }
        
        private void OnExecuteAnalyOperationCompleted(object arg) {
            if ((this.ExecuteAnalyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteAnalyCompleted(this, new ExecuteAnalyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/ExecuteAnalyNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteAnalyNew(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotType, 
                    string strDotString, 
                    string strSolutionName, 
                    string strInputAtts, 
                    string strOrderBy, 
                    string classInfos, 
                    string strTargets, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ) {
            object[] results = this.Invoke("ExecuteAnalyNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotType,
                        strDotString,
                        strSolutionName,
                        strInputAtts,
                        strOrderBy,
                        classInfos,
                        strTargets,
                        strUser,
                        nAlyType,
                        ifReturnRes,
                        strList,
                        dLeftDistance,
                        dRightDistance,
                        nKnobType,
                        str6xFileName,
                        strUnit,
                        strPointPM,
                        strPointMU,
                        strPointGQ});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteAnalyNewAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotType, 
                    string strDotString, 
                    string strSolutionName, 
                    string strInputAtts, 
                    string strOrderBy, 
                    string classInfos, 
                    string strTargets, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ) {
            this.ExecuteAnalyNewAsync(strCaseNo, strAreaNo, strDotRegionCode, strDotSubjectType, strDotType, strDotString, strSolutionName, strInputAtts, strOrderBy, classInfos, strTargets, strUser, nAlyType, ifReturnRes, strList, dLeftDistance, dRightDistance, nKnobType, str6xFileName, strUnit, strPointPM, strPointMU, strPointGQ, null);
        }
        
        /// <remarks/>
        public void ExecuteAnalyNewAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotType, 
                    string strDotString, 
                    string strSolutionName, 
                    string strInputAtts, 
                    string strOrderBy, 
                    string classInfos, 
                    string strTargets, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ, 
                    object userState) {
            if ((this.ExecuteAnalyNewOperationCompleted == null)) {
                this.ExecuteAnalyNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteAnalyNewOperationCompleted);
            }
            this.InvokeAsync("ExecuteAnalyNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotType,
                        strDotString,
                        strSolutionName,
                        strInputAtts,
                        strOrderBy,
                        classInfos,
                        strTargets,
                        strUser,
                        nAlyType,
                        ifReturnRes,
                        strList,
                        dLeftDistance,
                        dRightDistance,
                        nKnobType,
                        str6xFileName,
                        strUnit,
                        strPointPM,
                        strPointMU,
                        strPointGQ}, this.ExecuteAnalyNewOperationCompleted, userState);
        }
        
        private void OnExecuteAnalyNewOperationCompleted(object arg) {
            if ((this.ExecuteAnalyNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteAnalyNewCompleted(this, new ExecuteAnalyNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/ExecuteMapAnaly", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteMapAnaly(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotType, 
                    string strDotString, 
                    string strSolutionName, 
                    string strInputAtts, 
                    string strOrderBy, 
                    string classInfos, 
                    string strTargets, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ) {
            object[] results = this.Invoke("ExecuteMapAnaly", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotType,
                        strDotString,
                        strSolutionName,
                        strInputAtts,
                        strOrderBy,
                        classInfos,
                        strTargets,
                        strUser,
                        nAlyType,
                        ifReturnRes,
                        strList,
                        dLeftDistance,
                        dRightDistance,
                        nKnobType,
                        str6xFileName,
                        strUnit,
                        strPointPM,
                        strPointMU,
                        strPointGQ});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteMapAnalyAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotType, 
                    string strDotString, 
                    string strSolutionName, 
                    string strInputAtts, 
                    string strOrderBy, 
                    string classInfos, 
                    string strTargets, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ) {
            this.ExecuteMapAnalyAsync(strCaseNo, strAreaNo, strDotRegionCode, strDotSubjectType, strDotType, strDotString, strSolutionName, strInputAtts, strOrderBy, classInfos, strTargets, strUser, nAlyType, ifReturnRes, strList, dLeftDistance, dRightDistance, nKnobType, str6xFileName, strUnit, strPointPM, strPointMU, strPointGQ, null);
        }
        
        /// <remarks/>
        public void ExecuteMapAnalyAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotType, 
                    string strDotString, 
                    string strSolutionName, 
                    string strInputAtts, 
                    string strOrderBy, 
                    string classInfos, 
                    string strTargets, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ, 
                    object userState) {
            if ((this.ExecuteMapAnalyOperationCompleted == null)) {
                this.ExecuteMapAnalyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteMapAnalyOperationCompleted);
            }
            this.InvokeAsync("ExecuteMapAnaly", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotType,
                        strDotString,
                        strSolutionName,
                        strInputAtts,
                        strOrderBy,
                        classInfos,
                        strTargets,
                        strUser,
                        nAlyType,
                        ifReturnRes,
                        strList,
                        dLeftDistance,
                        dRightDistance,
                        nKnobType,
                        str6xFileName,
                        strUnit,
                        strPointPM,
                        strPointMU,
                        strPointGQ}, this.ExecuteMapAnalyOperationCompleted, userState);
        }
        
        private void OnExecuteMapAnalyOperationCompleted(object arg) {
            if ((this.ExecuteMapAnalyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteMapAnalyCompleted(this, new ExecuteMapAnalyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DeleteAnalyStatResult", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteAnalyStatResult(string strCaseNo, string strAreaNo) {
            object[] results = this.Invoke("DeleteAnalyStatResult", new object[] {
                        strCaseNo,
                        strAreaNo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAnalyStatResultAsync(string strCaseNo, string strAreaNo) {
            this.DeleteAnalyStatResultAsync(strCaseNo, strAreaNo, null);
        }
        
        /// <remarks/>
        public void DeleteAnalyStatResultAsync(string strCaseNo, string strAreaNo, object userState) {
            if ((this.DeleteAnalyStatResultOperationCompleted == null)) {
                this.DeleteAnalyStatResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAnalyStatResultOperationCompleted);
            }
            this.InvokeAsync("DeleteAnalyStatResult", new object[] {
                        strCaseNo,
                        strAreaNo}, this.DeleteAnalyStatResultOperationCompleted, userState);
        }
        
        private void OnDeleteAnalyStatResultOperationCompleted(object arg) {
            if ((this.DeleteAnalyStatResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAnalyStatResultCompleted(this, new DeleteAnalyStatResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DeleteAnalyStatResultNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteAnalyStatResultNew(string strCaseNo, string strAreaNo, string strDirEx) {
            object[] results = this.Invoke("DeleteAnalyStatResultNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDirEx});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAnalyStatResultNewAsync(string strCaseNo, string strAreaNo, string strDirEx) {
            this.DeleteAnalyStatResultNewAsync(strCaseNo, strAreaNo, strDirEx, null);
        }
        
        /// <remarks/>
        public void DeleteAnalyStatResultNewAsync(string strCaseNo, string strAreaNo, string strDirEx, object userState) {
            if ((this.DeleteAnalyStatResultNewOperationCompleted == null)) {
                this.DeleteAnalyStatResultNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAnalyStatResultNewOperationCompleted);
            }
            this.InvokeAsync("DeleteAnalyStatResultNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDirEx}, this.DeleteAnalyStatResultNewOperationCompleted, userState);
        }
        
        private void OnDeleteAnalyStatResultNewOperationCompleted(object arg) {
            if ((this.DeleteAnalyStatResultNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAnalyStatResultNewCompleted(this, new DeleteAnalyStatResultNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DeleteAnalys", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteAnalys(string[] caseNo, string[] areaNo) {
            object[] results = this.Invoke("DeleteAnalys", new object[] {
                        caseNo,
                        areaNo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAnalysAsync(string[] caseNo, string[] areaNo) {
            this.DeleteAnalysAsync(caseNo, areaNo, null);
        }
        
        /// <remarks/>
        public void DeleteAnalysAsync(string[] caseNo, string[] areaNo, object userState) {
            if ((this.DeleteAnalysOperationCompleted == null)) {
                this.DeleteAnalysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAnalysOperationCompleted);
            }
            this.InvokeAsync("DeleteAnalys", new object[] {
                        caseNo,
                        areaNo}, this.DeleteAnalysOperationCompleted, userState);
        }
        
        private void OnDeleteAnalysOperationCompleted(object arg) {
            if ((this.DeleteAnalysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAnalysCompleted(this, new DeleteAnalysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DeleteXMLStatResult", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteXMLStatResult(string name, string filename, string caseNo) {
            object[] results = this.Invoke("DeleteXMLStatResult", new object[] {
                        name,
                        filename,
                        caseNo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteXMLStatResultAsync(string name, string filename, string caseNo) {
            this.DeleteXMLStatResultAsync(name, filename, caseNo, null);
        }
        
        /// <remarks/>
        public void DeleteXMLStatResultAsync(string name, string filename, string caseNo, object userState) {
            if ((this.DeleteXMLStatResultOperationCompleted == null)) {
                this.DeleteXMLStatResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteXMLStatResultOperationCompleted);
            }
            this.InvokeAsync("DeleteXMLStatResult", new object[] {
                        name,
                        filename,
                        caseNo}, this.DeleteXMLStatResultOperationCompleted, userState);
        }
        
        private void OnDeleteXMLStatResultOperationCompleted(object arg) {
            if ((this.DeleteXMLStatResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteXMLStatResultCompleted(this, new DeleteXMLStatResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetAnalyStatResult", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAnalyStatResult(string strCaseNo, string strAreaNo, string strTableName) {
            object[] results = this.Invoke("GetAnalyStatResult", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strTableName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAnalyStatResultAsync(string strCaseNo, string strAreaNo, string strTableName) {
            this.GetAnalyStatResultAsync(strCaseNo, strAreaNo, strTableName, null);
        }
        
        /// <remarks/>
        public void GetAnalyStatResultAsync(string strCaseNo, string strAreaNo, string strTableName, object userState) {
            if ((this.GetAnalyStatResultOperationCompleted == null)) {
                this.GetAnalyStatResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnalyStatResultOperationCompleted);
            }
            this.InvokeAsync("GetAnalyStatResult", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strTableName}, this.GetAnalyStatResultOperationCompleted, userState);
        }
        
        private void OnGetAnalyStatResultOperationCompleted(object arg) {
            if ((this.GetAnalyStatResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnalyStatResultCompleted(this, new GetAnalyStatResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetAnalyStatResultNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAnalyStatResultNew(string strCaseNo, string strAreaNo, string strTableName, string strDirEx) {
            object[] results = this.Invoke("GetAnalyStatResultNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strTableName,
                        strDirEx});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAnalyStatResultNewAsync(string strCaseNo, string strAreaNo, string strTableName, string strDirEx) {
            this.GetAnalyStatResultNewAsync(strCaseNo, strAreaNo, strTableName, strDirEx, null);
        }
        
        /// <remarks/>
        public void GetAnalyStatResultNewAsync(string strCaseNo, string strAreaNo, string strTableName, string strDirEx, object userState) {
            if ((this.GetAnalyStatResultNewOperationCompleted == null)) {
                this.GetAnalyStatResultNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnalyStatResultNewOperationCompleted);
            }
            this.InvokeAsync("GetAnalyStatResultNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strTableName,
                        strDirEx}, this.GetAnalyStatResultNewOperationCompleted, userState);
        }
        
        private void OnGetAnalyStatResultNewOperationCompleted(object arg) {
            if ((this.GetAnalyStatResultNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnalyStatResultNewCompleted(this, new GetAnalyStatResultNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/SetAnalyParam", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetAnalyParam(string strCaseNo, string strAreaNo, string strDotRegionCode, string strDotSubjectType, string strDotDataYear, string strDotScale, string strDotType, string strDotString, string strCoveredSubjectList, string strCoveredDataYearList, string strCoveredScaleList, string strUser, EnumAnalyType alyType, bool ifReturnRes, bool ifShow) {
            object[] results = this.Invoke("SetAnalyParam", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotDataYear,
                        strDotScale,
                        strDotType,
                        strDotString,
                        strCoveredSubjectList,
                        strCoveredDataYearList,
                        strCoveredScaleList,
                        strUser,
                        alyType,
                        ifReturnRes,
                        ifShow});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetAnalyParamAsync(string strCaseNo, string strAreaNo, string strDotRegionCode, string strDotSubjectType, string strDotDataYear, string strDotScale, string strDotType, string strDotString, string strCoveredSubjectList, string strCoveredDataYearList, string strCoveredScaleList, string strUser, EnumAnalyType alyType, bool ifReturnRes, bool ifShow) {
            this.SetAnalyParamAsync(strCaseNo, strAreaNo, strDotRegionCode, strDotSubjectType, strDotDataYear, strDotScale, strDotType, strDotString, strCoveredSubjectList, strCoveredDataYearList, strCoveredScaleList, strUser, alyType, ifReturnRes, ifShow, null);
        }
        
        /// <remarks/>
        public void SetAnalyParamAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotDataYear, 
                    string strDotScale, 
                    string strDotType, 
                    string strDotString, 
                    string strCoveredSubjectList, 
                    string strCoveredDataYearList, 
                    string strCoveredScaleList, 
                    string strUser, 
                    EnumAnalyType alyType, 
                    bool ifReturnRes, 
                    bool ifShow, 
                    object userState) {
            if ((this.SetAnalyParamOperationCompleted == null)) {
                this.SetAnalyParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAnalyParamOperationCompleted);
            }
            this.InvokeAsync("SetAnalyParam", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotDataYear,
                        strDotScale,
                        strDotType,
                        strDotString,
                        strCoveredSubjectList,
                        strCoveredDataYearList,
                        strCoveredScaleList,
                        strUser,
                        alyType,
                        ifReturnRes,
                        ifShow}, this.SetAnalyParamOperationCompleted, userState);
        }
        
        private void OnSetAnalyParamOperationCompleted(object arg) {
            if ((this.SetAnalyParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAnalyParamCompleted(this, new SetAnalyParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/NewSetAnalyParam", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NewSetAnalyParam(string strCaseNo, string strAreaNo, string strDotType, string strDotString, string strSolutionName, string strInputAtts, string strOrderBy, string strClassInfos, string strTarget, string strUser, EnumAnalyType alyType, bool ifReturnRes, bool ifShow, string dispTargetList) {
            object[] results = this.Invoke("NewSetAnalyParam", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotType,
                        strDotString,
                        strSolutionName,
                        strInputAtts,
                        strOrderBy,
                        strClassInfos,
                        strTarget,
                        strUser,
                        alyType,
                        ifReturnRes,
                        ifShow,
                        dispTargetList});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NewSetAnalyParamAsync(string strCaseNo, string strAreaNo, string strDotType, string strDotString, string strSolutionName, string strInputAtts, string strOrderBy, string strClassInfos, string strTarget, string strUser, EnumAnalyType alyType, bool ifReturnRes, bool ifShow, string dispTargetList) {
            this.NewSetAnalyParamAsync(strCaseNo, strAreaNo, strDotType, strDotString, strSolutionName, strInputAtts, strOrderBy, strClassInfos, strTarget, strUser, alyType, ifReturnRes, ifShow, dispTargetList, null);
        }
        
        /// <remarks/>
        public void NewSetAnalyParamAsync(string strCaseNo, string strAreaNo, string strDotType, string strDotString, string strSolutionName, string strInputAtts, string strOrderBy, string strClassInfos, string strTarget, string strUser, EnumAnalyType alyType, bool ifReturnRes, bool ifShow, string dispTargetList, object userState) {
            if ((this.NewSetAnalyParamOperationCompleted == null)) {
                this.NewSetAnalyParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewSetAnalyParamOperationCompleted);
            }
            this.InvokeAsync("NewSetAnalyParam", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotType,
                        strDotString,
                        strSolutionName,
                        strInputAtts,
                        strOrderBy,
                        strClassInfos,
                        strTarget,
                        strUser,
                        alyType,
                        ifReturnRes,
                        ifShow,
                        dispTargetList}, this.NewSetAnalyParamOperationCompleted, userState);
        }
        
        private void OnNewSetAnalyParamOperationCompleted(object arg) {
            if ((this.NewSetAnalyParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewSetAnalyParamCompleted(this, new NewSetAnalyParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/SetAnalyParamNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetAnalyParamNew(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotDataYear, 
                    string strDotScale, 
                    string strDotType, 
                    string strDotString, 
                    string strCoveredSubjectList, 
                    string strCoveredDataYearList, 
                    string strCoveredScaleList, 
                    string strUser, 
                    EnumAnalyType alyType, 
                    bool ifReturnRes, 
                    bool ifShow, 
                    string strDispSubjectList, 
                    string strDispDataYearList, 
                    string strDispScaleList) {
            object[] results = this.Invoke("SetAnalyParamNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotDataYear,
                        strDotScale,
                        strDotType,
                        strDotString,
                        strCoveredSubjectList,
                        strCoveredDataYearList,
                        strCoveredScaleList,
                        strUser,
                        alyType,
                        ifReturnRes,
                        ifShow,
                        strDispSubjectList,
                        strDispDataYearList,
                        strDispScaleList});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetAnalyParamNewAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotDataYear, 
                    string strDotScale, 
                    string strDotType, 
                    string strDotString, 
                    string strCoveredSubjectList, 
                    string strCoveredDataYearList, 
                    string strCoveredScaleList, 
                    string strUser, 
                    EnumAnalyType alyType, 
                    bool ifReturnRes, 
                    bool ifShow, 
                    string strDispSubjectList, 
                    string strDispDataYearList, 
                    string strDispScaleList) {
            this.SetAnalyParamNewAsync(strCaseNo, strAreaNo, strDotRegionCode, strDotSubjectType, strDotDataYear, strDotScale, strDotType, strDotString, strCoveredSubjectList, strCoveredDataYearList, strCoveredScaleList, strUser, alyType, ifReturnRes, ifShow, strDispSubjectList, strDispDataYearList, strDispScaleList, null);
        }
        
        /// <remarks/>
        public void SetAnalyParamNewAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotDataYear, 
                    string strDotScale, 
                    string strDotType, 
                    string strDotString, 
                    string strCoveredSubjectList, 
                    string strCoveredDataYearList, 
                    string strCoveredScaleList, 
                    string strUser, 
                    EnumAnalyType alyType, 
                    bool ifReturnRes, 
                    bool ifShow, 
                    string strDispSubjectList, 
                    string strDispDataYearList, 
                    string strDispScaleList, 
                    object userState) {
            if ((this.SetAnalyParamNewOperationCompleted == null)) {
                this.SetAnalyParamNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAnalyParamNewOperationCompleted);
            }
            this.InvokeAsync("SetAnalyParamNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotDataYear,
                        strDotScale,
                        strDotType,
                        strDotString,
                        strCoveredSubjectList,
                        strCoveredDataYearList,
                        strCoveredScaleList,
                        strUser,
                        alyType,
                        ifReturnRes,
                        ifShow,
                        strDispSubjectList,
                        strDispDataYearList,
                        strDispScaleList}, this.SetAnalyParamNewOperationCompleted, userState);
        }
        
        private void OnSetAnalyParamNewOperationCompleted(object arg) {
            if ((this.SetAnalyParamNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAnalyParamNewCompleted(this, new SetAnalyParamNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetCoveredRegionCodeByGUID", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCoveredRegionCodeByGUID(string strGUID) {
            object[] results = this.Invoke("GetCoveredRegionCodeByGUID", new object[] {
                        strGUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCoveredRegionCodeByGUIDAsync(string strGUID) {
            this.GetCoveredRegionCodeByGUIDAsync(strGUID, null);
        }
        
        /// <remarks/>
        public void GetCoveredRegionCodeByGUIDAsync(string strGUID, object userState) {
            if ((this.GetCoveredRegionCodeByGUIDOperationCompleted == null)) {
                this.GetCoveredRegionCodeByGUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCoveredRegionCodeByGUIDOperationCompleted);
            }
            this.InvokeAsync("GetCoveredRegionCodeByGUID", new object[] {
                        strGUID}, this.GetCoveredRegionCodeByGUIDOperationCompleted, userState);
        }
        
        private void OnGetCoveredRegionCodeByGUIDOperationCompleted(object arg) {
            if ((this.GetCoveredRegionCodeByGUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCoveredRegionCodeByGUIDCompleted(this, new GetCoveredRegionCodeByGUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetCoveredRegionCodeByGUIDNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCoveredRegionCodeByGUIDNew(string strGUID) {
            object[] results = this.Invoke("GetCoveredRegionCodeByGUIDNew", new object[] {
                        strGUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCoveredRegionCodeByGUIDNewAsync(string strGUID) {
            this.GetCoveredRegionCodeByGUIDNewAsync(strGUID, null);
        }
        
        /// <remarks/>
        public void GetCoveredRegionCodeByGUIDNewAsync(string strGUID, object userState) {
            if ((this.GetCoveredRegionCodeByGUIDNewOperationCompleted == null)) {
                this.GetCoveredRegionCodeByGUIDNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCoveredRegionCodeByGUIDNewOperationCompleted);
            }
            this.InvokeAsync("GetCoveredRegionCodeByGUIDNew", new object[] {
                        strGUID}, this.GetCoveredRegionCodeByGUIDNewOperationCompleted, userState);
        }
        
        private void OnGetCoveredRegionCodeByGUIDNewOperationCompleted(object arg) {
            if ((this.GetCoveredRegionCodeByGUIDNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCoveredRegionCodeByGUIDNewCompleted(this, new GetCoveredRegionCodeByGUIDNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/IsPolygonCovered", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsPolygonCovered(string strDots, string strDotType, string strDotRegionCode, string strDotSubjectType, string strCoverRegionCode, string strCoverSubjectType, string strCoverDataYear, string strCoverScale, string strCoverLayerName) {
            object[] results = this.Invoke("IsPolygonCovered", new object[] {
                        strDots,
                        strDotType,
                        strDotRegionCode,
                        strDotSubjectType,
                        strCoverRegionCode,
                        strCoverSubjectType,
                        strCoverDataYear,
                        strCoverScale,
                        strCoverLayerName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPolygonCoveredAsync(string strDots, string strDotType, string strDotRegionCode, string strDotSubjectType, string strCoverRegionCode, string strCoverSubjectType, string strCoverDataYear, string strCoverScale, string strCoverLayerName) {
            this.IsPolygonCoveredAsync(strDots, strDotType, strDotRegionCode, strDotSubjectType, strCoverRegionCode, strCoverSubjectType, strCoverDataYear, strCoverScale, strCoverLayerName, null);
        }
        
        /// <remarks/>
        public void IsPolygonCoveredAsync(string strDots, string strDotType, string strDotRegionCode, string strDotSubjectType, string strCoverRegionCode, string strCoverSubjectType, string strCoverDataYear, string strCoverScale, string strCoverLayerName, object userState) {
            if ((this.IsPolygonCoveredOperationCompleted == null)) {
                this.IsPolygonCoveredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPolygonCoveredOperationCompleted);
            }
            this.InvokeAsync("IsPolygonCovered", new object[] {
                        strDots,
                        strDotType,
                        strDotRegionCode,
                        strDotSubjectType,
                        strCoverRegionCode,
                        strCoverSubjectType,
                        strCoverDataYear,
                        strCoverScale,
                        strCoverLayerName}, this.IsPolygonCoveredOperationCompleted, userState);
        }
        
        private void OnIsPolygonCoveredOperationCompleted(object arg) {
            if ((this.IsPolygonCoveredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPolygonCoveredCompleted(this, new IsPolygonCoveredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/IsPolygonCoveredNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsPolygonCoveredNew(string strDots, string strDotType, string strDotSolutionName, string strDotInputAtts, string strDotOrderBy, string strCoveredSolutionName, string strCoveredInputAtts, string strCoveredOrderBy) {
            object[] results = this.Invoke("IsPolygonCoveredNew", new object[] {
                        strDots,
                        strDotType,
                        strDotSolutionName,
                        strDotInputAtts,
                        strDotOrderBy,
                        strCoveredSolutionName,
                        strCoveredInputAtts,
                        strCoveredOrderBy});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPolygonCoveredNewAsync(string strDots, string strDotType, string strDotSolutionName, string strDotInputAtts, string strDotOrderBy, string strCoveredSolutionName, string strCoveredInputAtts, string strCoveredOrderBy) {
            this.IsPolygonCoveredNewAsync(strDots, strDotType, strDotSolutionName, strDotInputAtts, strDotOrderBy, strCoveredSolutionName, strCoveredInputAtts, strCoveredOrderBy, null);
        }
        
        /// <remarks/>
        public void IsPolygonCoveredNewAsync(string strDots, string strDotType, string strDotSolutionName, string strDotInputAtts, string strDotOrderBy, string strCoveredSolutionName, string strCoveredInputAtts, string strCoveredOrderBy, object userState) {
            if ((this.IsPolygonCoveredNewOperationCompleted == null)) {
                this.IsPolygonCoveredNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPolygonCoveredNewOperationCompleted);
            }
            this.InvokeAsync("IsPolygonCoveredNew", new object[] {
                        strDots,
                        strDotType,
                        strDotSolutionName,
                        strDotInputAtts,
                        strDotOrderBy,
                        strCoveredSolutionName,
                        strCoveredInputAtts,
                        strCoveredOrderBy}, this.IsPolygonCoveredNewOperationCompleted, userState);
        }
        
        private void OnIsPolygonCoveredNewOperationCompleted(object arg) {
            if ((this.IsPolygonCoveredNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPolygonCoveredNewCompleted(this, new IsPolygonCoveredNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetCoveredRegionCode", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCoveredRegionCode(string strDots, string strDotType, string strDotRegionCode, string strDotSubjectType, bool ifBuffer, string bufferType, int bufferMode, double leftDis, double rightDis, string strCoverSubjectTypeList, string strCoverDataYearList, string strCoverScaleList, string srcSRSID) {
            object[] results = this.Invoke("GetCoveredRegionCode", new object[] {
                        strDots,
                        strDotType,
                        strDotRegionCode,
                        strDotSubjectType,
                        ifBuffer,
                        bufferType,
                        bufferMode,
                        leftDis,
                        rightDis,
                        strCoverSubjectTypeList,
                        strCoverDataYearList,
                        strCoverScaleList,
                        srcSRSID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCoveredRegionCodeAsync(string strDots, string strDotType, string strDotRegionCode, string strDotSubjectType, bool ifBuffer, string bufferType, int bufferMode, double leftDis, double rightDis, string strCoverSubjectTypeList, string strCoverDataYearList, string strCoverScaleList, string srcSRSID) {
            this.GetCoveredRegionCodeAsync(strDots, strDotType, strDotRegionCode, strDotSubjectType, ifBuffer, bufferType, bufferMode, leftDis, rightDis, strCoverSubjectTypeList, strCoverDataYearList, strCoverScaleList, srcSRSID, null);
        }
        
        /// <remarks/>
        public void GetCoveredRegionCodeAsync(string strDots, string strDotType, string strDotRegionCode, string strDotSubjectType, bool ifBuffer, string bufferType, int bufferMode, double leftDis, double rightDis, string strCoverSubjectTypeList, string strCoverDataYearList, string strCoverScaleList, string srcSRSID, object userState) {
            if ((this.GetCoveredRegionCodeOperationCompleted == null)) {
                this.GetCoveredRegionCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCoveredRegionCodeOperationCompleted);
            }
            this.InvokeAsync("GetCoveredRegionCode", new object[] {
                        strDots,
                        strDotType,
                        strDotRegionCode,
                        strDotSubjectType,
                        ifBuffer,
                        bufferType,
                        bufferMode,
                        leftDis,
                        rightDis,
                        strCoverSubjectTypeList,
                        strCoverDataYearList,
                        strCoverScaleList,
                        srcSRSID}, this.GetCoveredRegionCodeOperationCompleted, userState);
        }
        
        private void OnGetCoveredRegionCodeOperationCompleted(object arg) {
            if ((this.GetCoveredRegionCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCoveredRegionCodeCompleted(this, new GetCoveredRegionCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetCoveredRegionCodeNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCoveredRegionCodeNew(string strDots, string strDotType, string strSolutionName, string strInputAtts, string orderBy, bool ifBuffer, string bufferType, int bufferMode, double leftDis, double rightDis, string classInfos, string srcSRSID) {
            object[] results = this.Invoke("GetCoveredRegionCodeNew", new object[] {
                        strDots,
                        strDotType,
                        strSolutionName,
                        strInputAtts,
                        orderBy,
                        ifBuffer,
                        bufferType,
                        bufferMode,
                        leftDis,
                        rightDis,
                        classInfos,
                        srcSRSID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCoveredRegionCodeNewAsync(string strDots, string strDotType, string strSolutionName, string strInputAtts, string orderBy, bool ifBuffer, string bufferType, int bufferMode, double leftDis, double rightDis, string classInfos, string srcSRSID) {
            this.GetCoveredRegionCodeNewAsync(strDots, strDotType, strSolutionName, strInputAtts, orderBy, ifBuffer, bufferType, bufferMode, leftDis, rightDis, classInfos, srcSRSID, null);
        }
        
        /// <remarks/>
        public void GetCoveredRegionCodeNewAsync(string strDots, string strDotType, string strSolutionName, string strInputAtts, string orderBy, bool ifBuffer, string bufferType, int bufferMode, double leftDis, double rightDis, string classInfos, string srcSRSID, object userState) {
            if ((this.GetCoveredRegionCodeNewOperationCompleted == null)) {
                this.GetCoveredRegionCodeNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCoveredRegionCodeNewOperationCompleted);
            }
            this.InvokeAsync("GetCoveredRegionCodeNew", new object[] {
                        strDots,
                        strDotType,
                        strSolutionName,
                        strInputAtts,
                        orderBy,
                        ifBuffer,
                        bufferType,
                        bufferMode,
                        leftDis,
                        rightDis,
                        classInfos,
                        srcSRSID}, this.GetCoveredRegionCodeNewOperationCompleted, userState);
        }
        
        private void OnGetCoveredRegionCodeNewOperationCompleted(object arg) {
            if ((this.GetCoveredRegionCodeNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCoveredRegionCodeNewCompleted(this, new GetCoveredRegionCodeNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetAnalyResult", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAnalyResult(string strCaseNo, string strAreaNo, string strUnit, string strPoint, string strSubjectTypeList) {
            object[] results = this.Invoke("GetAnalyResult", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strUnit,
                        strPoint,
                        strSubjectTypeList});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAnalyResultAsync(string strCaseNo, string strAreaNo, string strUnit, string strPoint, string strSubjectTypeList) {
            this.GetAnalyResultAsync(strCaseNo, strAreaNo, strUnit, strPoint, strSubjectTypeList, null);
        }
        
        /// <remarks/>
        public void GetAnalyResultAsync(string strCaseNo, string strAreaNo, string strUnit, string strPoint, string strSubjectTypeList, object userState) {
            if ((this.GetAnalyResultOperationCompleted == null)) {
                this.GetAnalyResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnalyResultOperationCompleted);
            }
            this.InvokeAsync("GetAnalyResult", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strUnit,
                        strPoint,
                        strSubjectTypeList}, this.GetAnalyResultOperationCompleted, userState);
        }
        
        private void OnGetAnalyResultOperationCompleted(object arg) {
            if ((this.GetAnalyResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnalyResultCompleted(this, new GetAnalyResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetAnalyResultNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAnalyResultNew(string strCaseNo, string strAreaNo, string strUnit, string strPoint, string strSubjectTypeList, string strDirEx) {
            object[] results = this.Invoke("GetAnalyResultNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strUnit,
                        strPoint,
                        strSubjectTypeList,
                        strDirEx});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAnalyResultNewAsync(string strCaseNo, string strAreaNo, string strUnit, string strPoint, string strSubjectTypeList, string strDirEx) {
            this.GetAnalyResultNewAsync(strCaseNo, strAreaNo, strUnit, strPoint, strSubjectTypeList, strDirEx, null);
        }
        
        /// <remarks/>
        public void GetAnalyResultNewAsync(string strCaseNo, string strAreaNo, string strUnit, string strPoint, string strSubjectTypeList, string strDirEx, object userState) {
            if ((this.GetAnalyResultNewOperationCompleted == null)) {
                this.GetAnalyResultNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnalyResultNewOperationCompleted);
            }
            this.InvokeAsync("GetAnalyResultNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strUnit,
                        strPoint,
                        strSubjectTypeList,
                        strDirEx}, this.GetAnalyResultNewOperationCompleted, userState);
        }
        
        private void OnGetAnalyResultNewOperationCompleted(object arg) {
            if ((this.GetAnalyResultNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnalyResultNewCompleted(this, new GetAnalyResultNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GDLStata", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GDLStata(string[] arrYears, string strCaseNo, string strAreaNo) {
            object[] results = this.Invoke("GDLStata", new object[] {
                        arrYears,
                        strCaseNo,
                        strAreaNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GDLStataAsync(string[] arrYears, string strCaseNo, string strAreaNo) {
            this.GDLStataAsync(arrYears, strCaseNo, strAreaNo, null);
        }
        
        /// <remarks/>
        public void GDLStataAsync(string[] arrYears, string strCaseNo, string strAreaNo, object userState) {
            if ((this.GDLStataOperationCompleted == null)) {
                this.GDLStataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGDLStataOperationCompleted);
            }
            this.InvokeAsync("GDLStata", new object[] {
                        arrYears,
                        strCaseNo,
                        strAreaNo}, this.GDLStataOperationCompleted, userState);
        }
        
        private void OnGDLStataOperationCompleted(object arg) {
            if ((this.GDLStataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GDLStataCompleted(this, new GDLStataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/PZGStata", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PZGStata(string[] arrYears, string strCaseNo, string strAreaNo) {
            object[] results = this.Invoke("PZGStata", new object[] {
                        arrYears,
                        strCaseNo,
                        strAreaNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PZGStataAsync(string[] arrYears, string strCaseNo, string strAreaNo) {
            this.PZGStataAsync(arrYears, strCaseNo, strAreaNo, null);
        }
        
        /// <remarks/>
        public void PZGStataAsync(string[] arrYears, string strCaseNo, string strAreaNo, object userState) {
            if ((this.PZGStataOperationCompleted == null)) {
                this.PZGStataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPZGStataOperationCompleted);
            }
            this.InvokeAsync("PZGStata", new object[] {
                        arrYears,
                        strCaseNo,
                        strAreaNo}, this.PZGStataOperationCompleted, userState);
        }
        
        private void OnPZGStataOperationCompleted(object arg) {
            if ((this.PZGStataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PZGStataCompleted(this, new PZGStataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetStatMDBPath", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStatMDBPath(string strCaseNo, string strAreaNo) {
            object[] results = this.Invoke("GetStatMDBPath", new object[] {
                        strCaseNo,
                        strAreaNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatMDBPathAsync(string strCaseNo, string strAreaNo) {
            this.GetStatMDBPathAsync(strCaseNo, strAreaNo, null);
        }
        
        /// <remarks/>
        public void GetStatMDBPathAsync(string strCaseNo, string strAreaNo, object userState) {
            if ((this.GetStatMDBPathOperationCompleted == null)) {
                this.GetStatMDBPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatMDBPathOperationCompleted);
            }
            this.InvokeAsync("GetStatMDBPath", new object[] {
                        strCaseNo,
                        strAreaNo}, this.GetStatMDBPathOperationCompleted, userState);
        }
        
        private void OnGetStatMDBPathOperationCompleted(object arg) {
            if ((this.GetStatMDBPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatMDBPathCompleted(this, new GetStatMDBPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetStatMDBPathNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStatMDBPathNew(string strCaseNo, string strAreaNo, string strDirEx) {
            object[] results = this.Invoke("GetStatMDBPathNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDirEx});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatMDBPathNewAsync(string strCaseNo, string strAreaNo, string strDirEx) {
            this.GetStatMDBPathNewAsync(strCaseNo, strAreaNo, strDirEx, null);
        }
        
        /// <remarks/>
        public void GetStatMDBPathNewAsync(string strCaseNo, string strAreaNo, string strDirEx, object userState) {
            if ((this.GetStatMDBPathNewOperationCompleted == null)) {
                this.GetStatMDBPathNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatMDBPathNewOperationCompleted);
            }
            this.InvokeAsync("GetStatMDBPathNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDirEx}, this.GetStatMDBPathNewOperationCompleted, userState);
        }
        
        private void OnGetStatMDBPathNewOperationCompleted(object arg) {
            if ((this.GetStatMDBPathNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatMDBPathNewCompleted(this, new GetStatMDBPathNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetAnalyResXML", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAnalyResXML(string strCaseNo, string strAreaNo) {
            object[] results = this.Invoke("GetAnalyResXML", new object[] {
                        strCaseNo,
                        strAreaNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAnalyResXMLAsync(string strCaseNo, string strAreaNo) {
            this.GetAnalyResXMLAsync(strCaseNo, strAreaNo, null);
        }
        
        /// <remarks/>
        public void GetAnalyResXMLAsync(string strCaseNo, string strAreaNo, object userState) {
            if ((this.GetAnalyResXMLOperationCompleted == null)) {
                this.GetAnalyResXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnalyResXMLOperationCompleted);
            }
            this.InvokeAsync("GetAnalyResXML", new object[] {
                        strCaseNo,
                        strAreaNo}, this.GetAnalyResXMLOperationCompleted, userState);
        }
        
        private void OnGetAnalyResXMLOperationCompleted(object arg) {
            if ((this.GetAnalyResXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnalyResXMLCompleted(this, new GetAnalyResXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetAnalyResXMLNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAnalyResXMLNew(string strCaseNo, string strAreaNo, string strDirEx) {
            object[] results = this.Invoke("GetAnalyResXMLNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDirEx});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAnalyResXMLNewAsync(string strCaseNo, string strAreaNo, string strDirEx) {
            this.GetAnalyResXMLNewAsync(strCaseNo, strAreaNo, strDirEx, null);
        }
        
        /// <remarks/>
        public void GetAnalyResXMLNewAsync(string strCaseNo, string strAreaNo, string strDirEx, object userState) {
            if ((this.GetAnalyResXMLNewOperationCompleted == null)) {
                this.GetAnalyResXMLNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnalyResXMLNewOperationCompleted);
            }
            this.InvokeAsync("GetAnalyResXMLNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDirEx}, this.GetAnalyResXMLNewOperationCompleted, userState);
        }
        
        private void OnGetAnalyResXMLNewOperationCompleted(object arg) {
            if ((this.GetAnalyResXMLNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnalyResXMLNewCompleted(this, new GetAnalyResXMLNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetOutTableScale", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOutTableScale(string strRegionCode, string strSubjectType, string strDataYear) {
            object[] results = this.Invoke("GetOutTableScale", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOutTableScaleAsync(string strRegionCode, string strSubjectType, string strDataYear) {
            this.GetOutTableScaleAsync(strRegionCode, strSubjectType, strDataYear, null);
        }
        
        /// <remarks/>
        public void GetOutTableScaleAsync(string strRegionCode, string strSubjectType, string strDataYear, object userState) {
            if ((this.GetOutTableScaleOperationCompleted == null)) {
                this.GetOutTableScaleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutTableScaleOperationCompleted);
            }
            this.InvokeAsync("GetOutTableScale", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear}, this.GetOutTableScaleOperationCompleted, userState);
        }
        
        private void OnGetOutTableScaleOperationCompleted(object arg) {
            if ((this.GetOutTableScaleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutTableScaleCompleted(this, new GetOutTableScaleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetOutTableScaleArray", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetOutTableScaleArray(string strRegionCode, string[] strSubjectTypeArr, string strDataYear) {
            object[] results = this.Invoke("GetOutTableScaleArray", new object[] {
                        strRegionCode,
                        strSubjectTypeArr,
                        strDataYear});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOutTableScaleArrayAsync(string strRegionCode, string[] strSubjectTypeArr, string strDataYear) {
            this.GetOutTableScaleArrayAsync(strRegionCode, strSubjectTypeArr, strDataYear, null);
        }
        
        /// <remarks/>
        public void GetOutTableScaleArrayAsync(string strRegionCode, string[] strSubjectTypeArr, string strDataYear, object userState) {
            if ((this.GetOutTableScaleArrayOperationCompleted == null)) {
                this.GetOutTableScaleArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutTableScaleArrayOperationCompleted);
            }
            this.InvokeAsync("GetOutTableScaleArray", new object[] {
                        strRegionCode,
                        strSubjectTypeArr,
                        strDataYear}, this.GetOutTableScaleArrayOperationCompleted, userState);
        }
        
        private void OnGetOutTableScaleArrayOperationCompleted(object arg) {
            if ((this.GetOutTableScaleArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutTableScaleArrayCompleted(this, new GetOutTableScaleArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetAnalyTableInfo", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAnalyTableInfo(string strCaseNo, string strAreaNo, string strSubjectType) {
            object[] results = this.Invoke("GetAnalyTableInfo", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strSubjectType});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAnalyTableInfoAsync(string strCaseNo, string strAreaNo, string strSubjectType) {
            this.GetAnalyTableInfoAsync(strCaseNo, strAreaNo, strSubjectType, null);
        }
        
        /// <remarks/>
        public void GetAnalyTableInfoAsync(string strCaseNo, string strAreaNo, string strSubjectType, object userState) {
            if ((this.GetAnalyTableInfoOperationCompleted == null)) {
                this.GetAnalyTableInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnalyTableInfoOperationCompleted);
            }
            this.InvokeAsync("GetAnalyTableInfo", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strSubjectType}, this.GetAnalyTableInfoOperationCompleted, userState);
        }
        
        private void OnGetAnalyTableInfoOperationCompleted(object arg) {
            if ((this.GetAnalyTableInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnalyTableInfoCompleted(this, new GetAnalyTableInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetAnalyTableInfoNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAnalyTableInfoNew(string strCaseNo, string strAreaNo, string strSubjectType, string strDirEx) {
            object[] results = this.Invoke("GetAnalyTableInfoNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strSubjectType,
                        strDirEx});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAnalyTableInfoNewAsync(string strCaseNo, string strAreaNo, string strSubjectType, string strDirEx) {
            this.GetAnalyTableInfoNewAsync(strCaseNo, strAreaNo, strSubjectType, strDirEx, null);
        }
        
        /// <remarks/>
        public void GetAnalyTableInfoNewAsync(string strCaseNo, string strAreaNo, string strSubjectType, string strDirEx, object userState) {
            if ((this.GetAnalyTableInfoNewOperationCompleted == null)) {
                this.GetAnalyTableInfoNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnalyTableInfoNewOperationCompleted);
            }
            this.InvokeAsync("GetAnalyTableInfoNew", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strSubjectType,
                        strDirEx}, this.GetAnalyTableInfoNewOperationCompleted, userState);
        }
        
        private void OnGetAnalyTableInfoNewOperationCompleted(object arg) {
            if ((this.GetAnalyTableInfoNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnalyTableInfoNewCompleted(this, new GetAnalyTableInfoNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/ExecuteAnalyForWeb", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteAnalyForWeb(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotDataYear, 
                    string strDotScale, 
                    string strDotType, 
                    string strDotString, 
                    string strCoveredSubjectList, 
                    string strCoverDataYearList, 
                    string strCoverScaleList, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ, 
                    string strAnalySolution) {
            object[] results = this.Invoke("ExecuteAnalyForWeb", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotDataYear,
                        strDotScale,
                        strDotType,
                        strDotString,
                        strCoveredSubjectList,
                        strCoverDataYearList,
                        strCoverScaleList,
                        strUser,
                        nAlyType,
                        ifReturnRes,
                        strList,
                        dLeftDistance,
                        dRightDistance,
                        nKnobType,
                        str6xFileName,
                        strUnit,
                        strPointPM,
                        strPointMU,
                        strPointGQ,
                        strAnalySolution});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteAnalyForWebAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotDataYear, 
                    string strDotScale, 
                    string strDotType, 
                    string strDotString, 
                    string strCoveredSubjectList, 
                    string strCoverDataYearList, 
                    string strCoverScaleList, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ, 
                    string strAnalySolution) {
            this.ExecuteAnalyForWebAsync(strCaseNo, strAreaNo, strDotRegionCode, strDotSubjectType, strDotDataYear, strDotScale, strDotType, strDotString, strCoveredSubjectList, strCoverDataYearList, strCoverScaleList, strUser, nAlyType, ifReturnRes, strList, dLeftDistance, dRightDistance, nKnobType, str6xFileName, strUnit, strPointPM, strPointMU, strPointGQ, strAnalySolution, null);
        }
        
        /// <remarks/>
        public void ExecuteAnalyForWebAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotDataYear, 
                    string strDotScale, 
                    string strDotType, 
                    string strDotString, 
                    string strCoveredSubjectList, 
                    string strCoverDataYearList, 
                    string strCoverScaleList, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ, 
                    string strAnalySolution, 
                    object userState) {
            if ((this.ExecuteAnalyForWebOperationCompleted == null)) {
                this.ExecuteAnalyForWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteAnalyForWebOperationCompleted);
            }
            this.InvokeAsync("ExecuteAnalyForWeb", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotDataYear,
                        strDotScale,
                        strDotType,
                        strDotString,
                        strCoveredSubjectList,
                        strCoverDataYearList,
                        strCoverScaleList,
                        strUser,
                        nAlyType,
                        ifReturnRes,
                        strList,
                        dLeftDistance,
                        dRightDistance,
                        nKnobType,
                        str6xFileName,
                        strUnit,
                        strPointPM,
                        strPointMU,
                        strPointGQ,
                        strAnalySolution}, this.ExecuteAnalyForWebOperationCompleted, userState);
        }
        
        private void OnExecuteAnalyForWebOperationCompleted(object arg) {
            if ((this.ExecuteAnalyForWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteAnalyForWebCompleted(this, new ExecuteAnalyForWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/ExecuteAnalyNewForWeb", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteAnalyNewForWeb(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotType, 
                    string strDotString, 
                    string strSolutionName, 
                    string strInputAtts, 
                    string strOrderBy, 
                    string classInfos, 
                    string strTargets, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ, 
                    string strAnalySolution) {
            object[] results = this.Invoke("ExecuteAnalyNewForWeb", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotType,
                        strDotString,
                        strSolutionName,
                        strInputAtts,
                        strOrderBy,
                        classInfos,
                        strTargets,
                        strUser,
                        nAlyType,
                        ifReturnRes,
                        strList,
                        dLeftDistance,
                        dRightDistance,
                        nKnobType,
                        str6xFileName,
                        strUnit,
                        strPointPM,
                        strPointMU,
                        strPointGQ,
                        strAnalySolution});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteAnalyNewForWebAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotType, 
                    string strDotString, 
                    string strSolutionName, 
                    string strInputAtts, 
                    string strOrderBy, 
                    string classInfos, 
                    string strTargets, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ, 
                    string strAnalySolution) {
            this.ExecuteAnalyNewForWebAsync(strCaseNo, strAreaNo, strDotRegionCode, strDotSubjectType, strDotType, strDotString, strSolutionName, strInputAtts, strOrderBy, classInfos, strTargets, strUser, nAlyType, ifReturnRes, strList, dLeftDistance, dRightDistance, nKnobType, str6xFileName, strUnit, strPointPM, strPointMU, strPointGQ, strAnalySolution, null);
        }
        
        /// <remarks/>
        public void ExecuteAnalyNewForWebAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotType, 
                    string strDotString, 
                    string strSolutionName, 
                    string strInputAtts, 
                    string strOrderBy, 
                    string classInfos, 
                    string strTargets, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ, 
                    string strAnalySolution, 
                    object userState) {
            if ((this.ExecuteAnalyNewForWebOperationCompleted == null)) {
                this.ExecuteAnalyNewForWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteAnalyNewForWebOperationCompleted);
            }
            this.InvokeAsync("ExecuteAnalyNewForWeb", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotType,
                        strDotString,
                        strSolutionName,
                        strInputAtts,
                        strOrderBy,
                        classInfos,
                        strTargets,
                        strUser,
                        nAlyType,
                        ifReturnRes,
                        strList,
                        dLeftDistance,
                        dRightDistance,
                        nKnobType,
                        str6xFileName,
                        strUnit,
                        strPointPM,
                        strPointMU,
                        strPointGQ,
                        strAnalySolution}, this.ExecuteAnalyNewForWebOperationCompleted, userState);
        }
        
        private void OnExecuteAnalyNewForWebOperationCompleted(object arg) {
            if ((this.ExecuteAnalyNewForWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteAnalyNewForWebCompleted(this, new ExecuteAnalyNewForWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/ExecuteMapAnalyForWeb", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteMapAnalyForWeb(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotType, 
                    string strDotString, 
                    string strSolutionName, 
                    string strInputAtts, 
                    string strOrderBy, 
                    string classInfos, 
                    string strTargets, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ, 
                    string strAnalySolution) {
            object[] results = this.Invoke("ExecuteMapAnalyForWeb", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotType,
                        strDotString,
                        strSolutionName,
                        strInputAtts,
                        strOrderBy,
                        classInfos,
                        strTargets,
                        strUser,
                        nAlyType,
                        ifReturnRes,
                        strList,
                        dLeftDistance,
                        dRightDistance,
                        nKnobType,
                        str6xFileName,
                        strUnit,
                        strPointPM,
                        strPointMU,
                        strPointGQ,
                        strAnalySolution});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteMapAnalyForWebAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotType, 
                    string strDotString, 
                    string strSolutionName, 
                    string strInputAtts, 
                    string strOrderBy, 
                    string classInfos, 
                    string strTargets, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ, 
                    string strAnalySolution) {
            this.ExecuteMapAnalyForWebAsync(strCaseNo, strAreaNo, strDotRegionCode, strDotSubjectType, strDotType, strDotString, strSolutionName, strInputAtts, strOrderBy, classInfos, strTargets, strUser, nAlyType, ifReturnRes, strList, dLeftDistance, dRightDistance, nKnobType, str6xFileName, strUnit, strPointPM, strPointMU, strPointGQ, strAnalySolution, null);
        }
        
        /// <remarks/>
        public void ExecuteMapAnalyForWebAsync(
                    string strCaseNo, 
                    string strAreaNo, 
                    string strDotRegionCode, 
                    string strDotSubjectType, 
                    string strDotType, 
                    string strDotString, 
                    string strSolutionName, 
                    string strInputAtts, 
                    string strOrderBy, 
                    string classInfos, 
                    string strTargets, 
                    string strUser, 
                    int nAlyType, 
                    bool ifReturnRes, 
                    string strList, 
                    double dLeftDistance, 
                    double dRightDistance, 
                    int nKnobType, 
                    string str6xFileName, 
                    string strUnit, 
                    string strPointPM, 
                    string strPointMU, 
                    string strPointGQ, 
                    string strAnalySolution, 
                    object userState) {
            if ((this.ExecuteMapAnalyForWebOperationCompleted == null)) {
                this.ExecuteMapAnalyForWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteMapAnalyForWebOperationCompleted);
            }
            this.InvokeAsync("ExecuteMapAnalyForWeb", new object[] {
                        strCaseNo,
                        strAreaNo,
                        strDotRegionCode,
                        strDotSubjectType,
                        strDotType,
                        strDotString,
                        strSolutionName,
                        strInputAtts,
                        strOrderBy,
                        classInfos,
                        strTargets,
                        strUser,
                        nAlyType,
                        ifReturnRes,
                        strList,
                        dLeftDistance,
                        dRightDistance,
                        nKnobType,
                        str6xFileName,
                        strUnit,
                        strPointPM,
                        strPointMU,
                        strPointGQ,
                        strAnalySolution}, this.ExecuteMapAnalyForWebOperationCompleted, userState);
        }
        
        private void OnExecuteMapAnalyForWebOperationCompleted(object arg) {
            if ((this.ExecuteMapAnalyForWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteMapAnalyForWebCompleted(this, new ExecuteMapAnalyForWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetAnalyResultInfo", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAnalyResultInfo(string strSolutionName, string strInputAtt, string strCaseNo, string strAreaNo, string strUnit, string strPoint, string strSubjectType, string strTableName, string strProjectName) {
            object[] results = this.Invoke("GetAnalyResultInfo", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strCaseNo,
                        strAreaNo,
                        strUnit,
                        strPoint,
                        strSubjectType,
                        strTableName,
                        strProjectName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAnalyResultInfoAsync(string strSolutionName, string strInputAtt, string strCaseNo, string strAreaNo, string strUnit, string strPoint, string strSubjectType, string strTableName, string strProjectName) {
            this.GetAnalyResultInfoAsync(strSolutionName, strInputAtt, strCaseNo, strAreaNo, strUnit, strPoint, strSubjectType, strTableName, strProjectName, null);
        }
        
        /// <remarks/>
        public void GetAnalyResultInfoAsync(string strSolutionName, string strInputAtt, string strCaseNo, string strAreaNo, string strUnit, string strPoint, string strSubjectType, string strTableName, string strProjectName, object userState) {
            if ((this.GetAnalyResultInfoOperationCompleted == null)) {
                this.GetAnalyResultInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnalyResultInfoOperationCompleted);
            }
            this.InvokeAsync("GetAnalyResultInfo", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strCaseNo,
                        strAreaNo,
                        strUnit,
                        strPoint,
                        strSubjectType,
                        strTableName,
                        strProjectName}, this.GetAnalyResultInfoOperationCompleted, userState);
        }
        
        private void OnGetAnalyResultInfoOperationCompleted(object arg) {
            if ((this.GetAnalyResultInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnalyResultInfoCompleted(this, new GetAnalyResultInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/IsTableExistInDB", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsTableExistInDB(string strTableName, string strCon) {
            object[] results = this.Invoke("IsTableExistInDB", new object[] {
                        strTableName,
                        strCon});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsTableExistInDBAsync(string strTableName, string strCon) {
            this.IsTableExistInDBAsync(strTableName, strCon, null);
        }
        
        /// <remarks/>
        public void IsTableExistInDBAsync(string strTableName, string strCon, object userState) {
            if ((this.IsTableExistInDBOperationCompleted == null)) {
                this.IsTableExistInDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsTableExistInDBOperationCompleted);
            }
            this.InvokeAsync("IsTableExistInDB", new object[] {
                        strTableName,
                        strCon}, this.IsTableExistInDBOperationCompleted, userState);
        }
        
        private void OnIsTableExistInDBOperationCompleted(object arg) {
            if ((this.IsTableExistInDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsTableExistInDBCompleted(this, new IsTableExistInDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/PolygonsRelation", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PolygonsRelation(string strDots, int nSrsID, string strSolutionName, string strInputAtt, double nDistance, string strType) {
            object[] results = this.Invoke("PolygonsRelation", new object[] {
                        strDots,
                        nSrsID,
                        strSolutionName,
                        strInputAtt,
                        nDistance,
                        strType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PolygonsRelationAsync(string strDots, int nSrsID, string strSolutionName, string strInputAtt, double nDistance, string strType) {
            this.PolygonsRelationAsync(strDots, nSrsID, strSolutionName, strInputAtt, nDistance, strType, null);
        }
        
        /// <remarks/>
        public void PolygonsRelationAsync(string strDots, int nSrsID, string strSolutionName, string strInputAtt, double nDistance, string strType, object userState) {
            if ((this.PolygonsRelationOperationCompleted == null)) {
                this.PolygonsRelationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPolygonsRelationOperationCompleted);
            }
            this.InvokeAsync("PolygonsRelation", new object[] {
                        strDots,
                        nSrsID,
                        strSolutionName,
                        strInputAtt,
                        nDistance,
                        strType}, this.PolygonsRelationOperationCompleted, userState);
        }
        
        private void OnPolygonsRelationOperationCompleted(object arg) {
            if ((this.PolygonsRelationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PolygonsRelationCompleted(this, new PolygonsRelationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.mapgis.com.cn/")]
    public enum EnumAnalyType {
        
        /// <remarks/>
        Polygon,
        
        /// <remarks/>
        Point_Buffer,
        
        /// <remarks/>
        Line_Buffer,
        
        /// <remarks/>
        Polygon_Buffer,
        
        /// <remarks/>
        CarPatrol,
        
        /// <remarks/>
        Import6xFile,
        
        /// <remarks/>
        MapAnaly,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ExecuteAnalyCompletedEventHandler(object sender, ExecuteAnalyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteAnalyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteAnalyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ExecuteAnalyNewCompletedEventHandler(object sender, ExecuteAnalyNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteAnalyNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteAnalyNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ExecuteMapAnalyCompletedEventHandler(object sender, ExecuteMapAnalyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteMapAnalyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteMapAnalyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteAnalyStatResultCompletedEventHandler(object sender, DeleteAnalyStatResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAnalyStatResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteAnalyStatResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteAnalyStatResultNewCompletedEventHandler(object sender, DeleteAnalyStatResultNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAnalyStatResultNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteAnalyStatResultNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteAnalysCompletedEventHandler(object sender, DeleteAnalysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAnalysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteAnalysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteXMLStatResultCompletedEventHandler(object sender, DeleteXMLStatResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteXMLStatResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteXMLStatResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAnalyStatResultCompletedEventHandler(object sender, GetAnalyStatResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnalyStatResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnalyStatResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAnalyStatResultNewCompletedEventHandler(object sender, GetAnalyStatResultNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnalyStatResultNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnalyStatResultNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SetAnalyParamCompletedEventHandler(object sender, SetAnalyParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAnalyParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAnalyParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void NewSetAnalyParamCompletedEventHandler(object sender, NewSetAnalyParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewSetAnalyParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewSetAnalyParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SetAnalyParamNewCompletedEventHandler(object sender, SetAnalyParamNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAnalyParamNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAnalyParamNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCoveredRegionCodeByGUIDCompletedEventHandler(object sender, GetCoveredRegionCodeByGUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCoveredRegionCodeByGUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCoveredRegionCodeByGUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCoveredRegionCodeByGUIDNewCompletedEventHandler(object sender, GetCoveredRegionCodeByGUIDNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCoveredRegionCodeByGUIDNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCoveredRegionCodeByGUIDNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void IsPolygonCoveredCompletedEventHandler(object sender, IsPolygonCoveredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPolygonCoveredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPolygonCoveredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void IsPolygonCoveredNewCompletedEventHandler(object sender, IsPolygonCoveredNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPolygonCoveredNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPolygonCoveredNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCoveredRegionCodeCompletedEventHandler(object sender, GetCoveredRegionCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCoveredRegionCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCoveredRegionCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCoveredRegionCodeNewCompletedEventHandler(object sender, GetCoveredRegionCodeNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCoveredRegionCodeNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCoveredRegionCodeNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAnalyResultCompletedEventHandler(object sender, GetAnalyResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnalyResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnalyResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAnalyResultNewCompletedEventHandler(object sender, GetAnalyResultNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnalyResultNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnalyResultNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GDLStataCompletedEventHandler(object sender, GDLStataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GDLStataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GDLStataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void PZGStataCompletedEventHandler(object sender, PZGStataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PZGStataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PZGStataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetStatMDBPathCompletedEventHandler(object sender, GetStatMDBPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatMDBPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatMDBPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetStatMDBPathNewCompletedEventHandler(object sender, GetStatMDBPathNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatMDBPathNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatMDBPathNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAnalyResXMLCompletedEventHandler(object sender, GetAnalyResXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnalyResXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnalyResXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAnalyResXMLNewCompletedEventHandler(object sender, GetAnalyResXMLNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnalyResXMLNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnalyResXMLNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetOutTableScaleCompletedEventHandler(object sender, GetOutTableScaleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutTableScaleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutTableScaleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetOutTableScaleArrayCompletedEventHandler(object sender, GetOutTableScaleArrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutTableScaleArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutTableScaleArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAnalyTableInfoCompletedEventHandler(object sender, GetAnalyTableInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnalyTableInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnalyTableInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAnalyTableInfoNewCompletedEventHandler(object sender, GetAnalyTableInfoNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnalyTableInfoNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnalyTableInfoNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ExecuteAnalyForWebCompletedEventHandler(object sender, ExecuteAnalyForWebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteAnalyForWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteAnalyForWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ExecuteAnalyNewForWebCompletedEventHandler(object sender, ExecuteAnalyNewForWebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteAnalyNewForWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteAnalyNewForWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ExecuteMapAnalyForWebCompletedEventHandler(object sender, ExecuteMapAnalyForWebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteMapAnalyForWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteMapAnalyForWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAnalyResultInfoCompletedEventHandler(object sender, GetAnalyResultInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnalyResultInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnalyResultInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void IsTableExistInDBCompletedEventHandler(object sender, IsTableExistInDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsTableExistInDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsTableExistInDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void PolygonsRelationCompletedEventHandler(object sender, PolygonsRelationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PolygonsRelationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PolygonsRelationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591